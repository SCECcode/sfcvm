ARG BUILD_ENV=nocerts
FROM ubuntu:20.04 as os-update
LABEL maintainer="Brad Aagaard <baagaard@usgs.gov>"

ENV BUILD_ENV=${BUILD_ENV}


RUN apt-get update \
  && DEBIAN_FRONTEND="noninteractive" apt-get install -y --no-install-recommends \
  g++ \
  make \
  file \
  automake \
  autoconf \
  libtool \
  curl \
  libpython3.8 \
  python3-dev \
  python3-venv \
  python3-pip \
  python3-setuptools \
  zlib1g-dev \
  unzip \
  git \
  ca-certificates \
  libcppunit-dev \
  hdf5-tools \
  libhdf5-dev \
  sqlite3 \
  libsqlite3-0 \
  libsqlite3-dev \
  proj-bin \
  proj-data \
  libproj-dev \
  gdal-bin \
  libgdal-dev \
  lcov \
  gdb \
  valgrind \
  vim-common \
  vim-runtime \
  vim-nox

COPY docker/certs/ /usr/local/share/ca-certificates
RUN update-ca-certificates

# ------------------------------------------------------------------------------
FROM os-update as build-certs-doi

ONBUILD COPY docker/certs/ /usr/local/share/ca-certificates
ONBUILD RUN update-ca-certificates
ONBUILD ENV CERT_FILE=/etc/ssl/certs/DOIRootCA2.pem

FROM os-update as build-nocerts
ONBUILD ENV CERT_FILE=no

# ------------------------------------------------------------------------------
FROM build-${BUILD_ENV} as build-deps

# Install geomodelgrids to /opt/geomodelgrids
# Download source code to $HOME/src
# Build geomodelgrids in $HOME/build

ENV GMG_USER=gmg-tester \
  PYTHON_VERSION=3.8 \
  INSTALL_DIR=/opt/geomodelgrids
ENV HOME=/home/$GMG_USER \
  PATH=$INSTALL_DIR/bin:$PATH \
  LD_LIBRARY_PATH=$INSTALL_DIR/lib:$LD_LIBRARY_PATH \
  PYTHONPATH=${INSTALL_DIR}/lib/python${PYTHON_VERSION}/site-packages:${PYTHONPATH} \
  HDF5_INCDIR=/usr/include/hdf5/serial \
  HDF5_LIBDIR=/usr/lib/x86_64-linux-gnu/hdf5/serial
RUN useradd --create-home --shell /bin/bash $GMG_USER \
  && mkdir -p ${INSTALL_DIR} \
  && chown ${GMG_USER} ${INSTALL_DIR} \
  && chgrp ${GMG_USER} ${INSTALL_DIR}

ENV TOP_SRCDIR=$HOME/src \
  TOP_BUILDDIR=$HOME/build

USER ${GMG_USER}

# --------------------------------------
# Python packages
# --------------------------------------
RUN python3 -m venv ${INSTALL_DIR} && \
  if [ x${CERT_FILE} = x"no" ]; then \
  python3 -m pip install --upgrade pip setuptools && \
  python3 -m pip install numpy coverage && \
  CC=gcc HDF5_LIBDIR=${HDF5_LIBDIR} HDF5_INCLUDEDIR=${HDF5_INCDIR} python3 -m pip install --no-binary h5py h5py; \
  else \
  SSL_CERT_FILE=${CERT_FILE} REQUESTS_CA_BUNDLE=${CERT_FILE} python3 -m pip install --upgrade pip setuptools && \
  SSL_CERT_FILE=${CERT_FILE} REQUESTS_CA_BUNDLE=${CERT_FILE} python3 -m pip install numpy coverage && \
  SSL_CERT_FILE=${CERT_FILE} REQUESTS_CA_BUNDLE=${CERT_FILE} CC=gcc HDF5_LIBDIR=${HDF5_LIBDIR} HDF5_INCLUDEDIR=${HDF5_INCDIR} python3 -m pip install --no-binary h5py h5py; \
  fi

WORKDIR ${HOME}
CMD /bin/bash
